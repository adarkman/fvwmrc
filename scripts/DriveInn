
##########	DriveInn FVWM Script
##########	Storage drives manager
##########	by sebaro
##########
##########	rev.2012-08-16

WindowTitle {DriveInn}
WindowSize 320 180
WindowPosition 840 220

##### Global Style
Colorset 10
Font "xft:DejaVu Sans:size=8:bold"

Init
Begin
  ##### Settings
  Set $homeDir = (GetOutput {echo $HOME} 1 -1) {/.fvwm/scripts/}
  Set $browser = {dolphin}
  Set $refresh = {5}
  Set $exclude = {/boot,/usr,/tmp,/var}

  ##### Widgets
  Set $quitButton = $homeDir {icons/quit.png}
  ChangeIcon 13 $quitButton

  ##### Vaiables
  Set $toMount = {false}
  Set $toBrowse = {false}
  Set $toRefresh = {true}

  ##### Curly Brackets
  Set $leftCB = (GetOutput {printf "\173"} 1 -1)
  Set $rightCB = (GetOutput {printf "\175"} 1 -1)

  ##### Drive Filter
  Set $previousDrives = (GetOutput {echo $(udisks --dump | grep "has media" | sed -e "s/\s//g" -e "s/(.*//g" && udisks --dump | grep "is mounted" | sed -e "s/\s//g" -e "s/(.*//g")} 1 -1)
  Set $driveCounter = {ls /dev/disk/by-path | wc -l}
  Set $driveFilter = {for d in /dev/disk/by-path/*;do p=$} $leftCB {d#/dev/} $rightCB {;/sbin/udevadm info -q all -n $p | grep "DEVNAME\|DEVTYPE\|ID_TYPE\|ID_BUS" | sed -e "s/.*=//g";done}

  ##### Udev Version
  Set $udevVersion = (GetOutput {/sbin/udevadm --version} 1 -1)
End

PeriodicTasks
Begin
  ##### (Un)Mount Drives
  If $toMount == {true} Then
  Begin
    Set $iconWidget = (Add $thisDrive (Add $thisDrive -1))
    Set $titleWidget = (Add $thisDrive $thisDrive)
    Set $drivePath = (GetTitle $titleWidget)
    Set $notMounted = {echo } $drivePath { | grep -q "^/dev" && echo 1 || echo 0}
    If (GetOutput $notMounted 1 -1) == 1 Then
    Begin
      Set $notMountedCorrect = {grep -q "} $drivePath {" /etc/mtab && echo 1 || echo 0}
      If (GetOutput $notMountedCorrect 1 -1) <> 1 Then
      Begin
        Set $theMounting = {udisks --mount } $drivePath { && echo 1 || echo 0}
        If (GetOutput $theMounting 1 -1) == 1 Then
        Begin
          Set $mSuccess = {true}
          Set $driveMounted = 1
          Set $getMountPath = {udisks --show-info } $drivePath { | grep "mount paths" | sed -e "s/\s//g" | cut -d ":" -f 2}
          Set $putTitle = (GetOutput $getMountPath 1 -1)
        End
      End
      Else
        Set $toRefresh = {true}
    End
    Else
    Begin
      Set $mountedCorrect = {grep -q "} $drivePath {" /etc/mtab && echo 1 || echo 0}
      If (GetOutput $mountedCorrect 1 -1) == 1 Then
      Begin
        Set $getDevName = {cat /etc/mtab | grep } $drivePath { | cut -d " " -f 1}
        Set $drivePath = (GetOutput $getDevName 1 -1)
        Set $theUnmounting = {udisks --unmount } $drivePath { && echo 1 || echo 0}
        If (GetOutput $theUnmounting 1 -1) == 1 Then
        Begin
          Set $mSuccess = {true}
          Set $driveMounted = 0
          Set $putTitle = $drivePath
        End
      End
      Else
        Set $toRefresh = {true}      
    End
    If $mSuccess == {true} Then
    Begin
      Set $getDriveInfo = {/sbin/udevadm info -q all -n } $drivePath { | grep "ID_TYPE\|ID_BUS" | sed -e "s/.*=//g"}
      If $udevVersion == {171} Then
      Begin
        Set $driveIDType = (GetOutput $getDriveInfo 1 -1)
        Set $driveIDBus = (GetOutput $getDriveInfo 2 -1)
      End
      Else
      Begin
        Set $driveIDType = (GetOutput $getDriveInfo 2 -1)
        Set $driveIDBus = (GetOutput $getDriveInfo 1 -1)
      End
      If $driveIDType == {cd} Then
        Set $driveIcon = $homeDir {icons/} $driveIDType $driveMounted {.png}
      Else
        Set $driveIcon = $homeDir {icons/} $driveIDBus $driveMounted {.png}
      ChangeIcon $iconWidget $driveIcon
      ChangeTitle $titleWidget $putTitle
      Set $mSuccess = {false}
    End
    Set $toMount = {false}
  End

  ##### Browse Drives
  If $toBrowse == {true} Then
  Begin
    Set $titleWidget = (Add $thisDrive $thisDrive)
    Set $thisTitle = (GetTitle $titleWidget)
    Set $notMounted = {echo } $thisTitle { | grep -q "^/dev" && echo 1 || echo 0}
    If (GetOutput $notMounted 1 -1) <> 1 Then
    Begin
      Set $mountedCorrect = {grep -q "} $thisTitle {" /etc/mtab && echo 1 || echo 0}
      If (GetOutput $mountedCorrect 1 -1) == 1 Then
        Do {exec } $browser { } $thisTitle
      Else
        Set $toRefresh = {true}
    End
    Set $toBrowse = {false}
  End

  ##### Get & Show Drives
  If $toRefresh == {true} Then
  Begin
    Set $driveID = 1
    Set $driveIcon = 1
    Set $driveTitle = 2
    Set $infoPos = 1
    Set $driveNum = (GetOutput $driveCounter 1 -1)
    For $drivePos = 1 To $driveNum Do
    Begin
      If $driveID < 7 Then
      Begin
        Set $driveDevName = (GetOutput $driveFilter $infoPos -1)
        Set $driveDevType = (GetOutput $driveFilter (Add $infoPos 1) -1)
        If $udevVersion == {171} Then
        Begin
          Set $driveIDType = (GetOutput $driveFilter (Add $infoPos 2) -1)
          Set $driveIDBus = (GetOutput $driveFilter (Add $infoPos 3) -1)
        End
        Else
        Begin
          Set $driveIDType = (GetOutput $driveFilter (Add $infoPos 3) -1)
          Set $driveIDBus = (GetOutput $driveFilter (Add $infoPos 2) -1)
        End
        If $driveDevType <> $driveIDType Then
        Begin
          Set $getHasMedia = {udisks --show-info } $driveDevName { | grep "has media" | sed -e "s/\s//g" | cut -d ":" -f 2}
          Set $hasMedia = (GetOutput $getHasMedia 1 -1)
          Set $getIsExtSwap = {udisks --show-info } $driveDevName { | grep "type" | sed -e "s/\s//g" | cut -d ":" -f 2 | grep -q "0x05\|0x82" && echo 1 || echo 0}
          Set $isExtSwap = (GetOutput $getIsExtSwap 1 -1)
          Set $driveTypeOK = {true}
          If $hasMedia == 0 Then
            Set $driveTypeOK = {false}
          If $isExtSwap == 1 Then
            Set $driveTypeOK = {false}
          If $driveTypeOK == {true} Then
          Begin
            Set $getIsMounted = {udisks --show-info } $driveDevName { | grep "is mounted" | sed -e "s/\s//g" | cut -d ":" -f 2}
            Set $isMounted = (GetOutput $getIsMounted 1 -1)
            Set $getMountPath = {udisks --show-info } $driveDevName { | grep "mount paths" | sed -e "s/\s//g" | cut -d ":" -f 2}
            Set $mountPath = (GetOutput $getMountPath 1 -1)
            If $exclude <> {} Then
            Begin
              Set $matchPaths = {echo } $exclude { | sed -e "s/,\s\+/,/g" -e "s/\\/,/^\\/$,/g" -e "s/,/\\\|^/g"}
              Set $excludePaths = (GetOutput $matchPaths 1 -1)
              Set $mountPathNo = {echo } $mountPath { | grep -q "} $excludePaths {" && echo 1 || echo 0}
              Set $excludedPath = (GetOutput $mountPathNo 1 -1)
            End
            Else
              Set $excludedPath = 0
            If $excludedPath <> 1 Then
            Begin
              If $driveIDType == {cd} Then
                Set $driveIconThis = $homeDir {icons/} $driveIDType $isMounted {.png}
              Else
                Set $driveIconThis = $homeDir {icons/} $driveIDBus $isMounted {.png}
              If $isMounted == 1 Then
                Set $driveTitleThis = $mountPath
              Else
                Set $driveTitleThis = $driveDevName
              Set $driveTitleNow = (GetTitle $driveTitle)
              If $driveTitleNow <> $driveTitleThis Then
              Begin
                ChangeIcon $driveIcon $driveIconThis
                ChangeTitle $driveTitle $driveTitleThis
              End
              Set $driveID = (Add $driveID 1)
              Set $driveIcon = (Add $driveIcon 2)
              Set $driveTitle = (Add $driveTitle 2)
            End
          End
        End
      End
      Set $infoPos = (Add $infoPos 4)
    End

    ### Remove Drives With No Media
    For $driveDrop = $driveID To 6 Do
    Begin
      ChangeIcon $driveIcon $noIcon
      ChangeTitle $driveTitle {}
      Set $driveID = (Add $driveID 1)
      Set $driveIcon = (Add $driveIcon 2)
      Set $driveTitle = (Add $driveTitle 2)
    End
    Set $toRefresh = {false}
  End

  ##### Check For New Drives
  If (RemainderOfDiv (GetTime) $refresh) == 0 Then
  Begin
    Set $currentDrives = (GetOutput {echo $(udisks --dump | grep "has media" | sed -e "s/\s//g" -e "s/(.*//g" && udisks --dump | grep "is mounted" | sed -e "s/\s//g" -e "s/(.*//g")} 1 -1)
    If $currentDrives <> $previousDrives Then
      Set $toRefresh = {true}
    Set $previousDrives = $currentDrives
  End
End

Widget		1
Property
  Type		ItemDraw
  Size		64 64
  Position		28 5
  Flags		NoFocus NoReliefString
Main
  Case message of
    SingleClic :
    Begin
      Set $thisDrive = 1
      Set $toMount = {true}
    End
  End

Widget		2
Property
  Type		ItemDraw
  Size		100 15
  Position		10 70
  Flags		NoFocus NoReliefString
Main
  Case message of
    SingleClic :
    Begin
      Set $thisDrive = 1
      Set $toBrowse = {true}
    End
  End

Widget		3
Property
  Type		ItemDraw
  Size		64 64
  Position		128 5
  Flags		NoFocus NoReliefString
Main
  Case message of
    SingleClic :
    Begin
      Set $thisDrive = 2
      Set $toMount = {true}
    End
  End

Widget		4
Property
  Type		ItemDraw
  Size		100 15
  Position		110 70
  Flags		NoFocus NoReliefString
Main
  Case message of
    SingleClic :
    Begin
      Set $thisDrive = 2
      Set $toBrowse = {true}
    End
  End

Widget		5
Property
  Type		ItemDraw
  Size		64 64
  Position		228 5
  Flags		NoFocus NoReliefString
Main
  Case message of
    SingleClic :
    Begin
      Set $thisDrive = 3
      Set $toMount = {true}
    End
  End

Widget		6
Property
  Type		ItemDraw
  Size		100 15
  Position		210 70
  Flags		NoFocus NoReliefString
Main
  Case message of
    SingleClic :
    Begin
      Set $thisDrive = 3
      Set $toBrowse = {true}
    End
  End

Widget		7
Property
  Type		ItemDraw
  Size		64 64
  Position		28 90
  Flags		NoFocus NoReliefString
Main
  Case message of
    SingleClic :
    Begin
      Set $thisDrive = 4
      Set $toMount = {true}
    End
  End

Widget		8
Property
  Type		ItemDraw
  Size		100 15
  Position		10 155
  Flags		NoFocus NoReliefString
Main
  Case message of
    SingleClic :
    Begin
      Set $thisDrive = 4
      Set $toBrowse = {true}
    End
  End

Widget		9
Property
  Type		ItemDraw
  Size		64 64
  Position		128 90
  Flags		NoFocus NoReliefString
Main
  Case message of
    SingleClic :
    Begin
      Set $thisDrive = 5
      Set $toMount = {true}
    End
  End

Widget		10
Property
  Type		ItemDraw
  Size		100 15
  Position		110 155
  Flags		NoFocus NoReliefString
Main
  Case message of
    SingleClic :
    Begin
      Set $thisDrive = 5
      Set $toBrowse = {true}
    End
  End

Widget		11
Property
  Type		ItemDraw
  Size		64 64
  Position		228 90
  Flags		NoFocus NoReliefString
Main
  Case message of
    SingleClic :
    Begin
      Set $thisDrive = 6
      Set $toMount = {true}
    End
  End

Widget		12
Property
  Type		ItemDraw
  Size		100 15
  Position		210 155
  Flags		NoFocus NoReliefString
Main
  Case message of
    SingleClic :
    Begin
      Set $thisDrive = 6
      Set $toBrowse = {true}
    End
  End

Widget		13
Property
  Type		ItemDraw
  Size		16 16
  Position		303 1
  Flags		NoFocus NoReliefString
Main
  Case message of
    SingleClic :
    Begin
      Quit
    End
  End
